[{"E:\\workspace\\react-typescript\\src\\index.js":"1","E:\\workspace\\react-typescript\\src\\reportWebVitals.js":"2","E:\\workspace\\react-typescript\\src\\App.tsx":"3","E:\\workspace\\react-typescript\\src\\TodoItem.tsx":"4","E:\\workspace\\react-typescript\\src\\Label.tsx":"5"},{"size":478,"mtime":1611034902061,"results":"6","hashOfConfig":"7"},{"size":401,"mtime":1611034788198,"results":"8","hashOfConfig":"7"},{"size":653,"mtime":1611054112180,"results":"9","hashOfConfig":"7"},{"size":138,"mtime":1611053499073,"results":"10","hashOfConfig":"7"},{"size":692,"mtime":1611053416366,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pfy2jl",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"E:\\workspace\\react-typescript\\src\\index.js",[],"E:\\workspace\\react-typescript\\src\\reportWebVitals.js",[],"E:\\workspace\\react-typescript\\src\\App.tsx",["24"],"E:\\workspace\\react-typescript\\src\\TodoItem.tsx",["25","26","27"],"E:\\workspace\\react-typescript\\src\\Label.tsx",["28","29","30","31","32"],"import { useState } from 'react';\r\n\r\nconst Label = ({ item, setItem, TodoList, setTodoList }: any) => {\r\n  const [text, setText] = useState('');\r\n  const [number, setNumber] = useState(0);\r\n  const onChange = (e: any): void => {\r\n    const { value } = e.currentTarget;\r\n    setText(value);\r\n  };\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    setItem({ id: number, text: text, state: false });\r\n    setNumber(() => number + 1);\r\n    setTodoList(TodoList.concat(item));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input onChange={onChange} value={text}></input>\r\n      <button type={'submit'}>추가</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n",["33","34"],{"ruleId":"35","severity":1,"message":"36","line":11,"column":1,"nodeType":"37","messageId":"38","endLine":11,"endColumn":15},{"ruleId":"35","severity":1,"message":"36","line":1,"column":18,"nodeType":"39","messageId":"38","endLine":1,"endColumn":37},{"ruleId":"35","severity":1,"message":"40","line":1,"column":19,"nodeType":"41","messageId":"42","endLine":1,"endColumn":33},{"ruleId":"43","severity":1,"message":"44","line":1,"column":30,"nodeType":"45","messageId":"46","endLine":1,"endColumn":33,"suggestions":"47"},{"ruleId":"35","severity":1,"message":"36","line":3,"column":15,"nodeType":"39","messageId":"38","endLine":3,"endColumn":65},{"ruleId":"35","severity":1,"message":"40","line":3,"column":16,"nodeType":"41","messageId":"42","endLine":3,"endColumn":61},{"ruleId":"43","severity":1,"message":"44","line":3,"column":58,"nodeType":"45","messageId":"46","endLine":3,"endColumn":61,"suggestions":"48"},{"ruleId":"43","severity":1,"message":"44","line":6,"column":24,"nodeType":"45","messageId":"46","endLine":6,"endColumn":27,"suggestions":"49"},{"ruleId":"43","severity":1,"message":"44","line":11,"column":24,"nodeType":"45","messageId":"46","endLine":11,"endColumn":27,"suggestions":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","ArrowFunctionExpression","Object pattern argument should be typed with a non-any type.","ObjectPattern","anyTypedArgUnnamed","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["55","56"],["57","58"],["59","60"],["61","62"],"no-native-reassign",["63"],"no-negated-in-lhs",["64"],{"messageId":"65","fix":"66","desc":"67"},{"messageId":"68","fix":"69","desc":"70"},{"messageId":"65","fix":"71","desc":"67"},{"messageId":"68","fix":"72","desc":"70"},{"messageId":"65","fix":"73","desc":"67"},{"messageId":"68","fix":"74","desc":"70"},{"messageId":"65","fix":"75","desc":"67"},{"messageId":"68","fix":"76","desc":"70"},"no-global-assign","no-unsafe-negation","suggestUnknown",{"range":"77","text":"78"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"77","text":"79"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"80","text":"78"},{"range":"80","text":"79"},{"range":"81","text":"78"},{"range":"81","text":"79"},{"range":"82","text":"78"},{"range":"82","text":"79"},[29,32],"unknown","never",[94,97],[213,216],[322,325]]