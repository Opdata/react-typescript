[{"E:\\workspace\\react-typescript\\src\\index.js":"1","E:\\workspace\\react-typescript\\src\\reportWebVitals.js":"2","E:\\workspace\\react-typescript\\src\\App.tsx":"3","E:\\workspace\\react-typescript\\src\\TodoItem.tsx":"4","E:\\workspace\\react-typescript\\src\\Label.tsx":"5"},{"size":478,"mtime":1611034902061,"results":"6","hashOfConfig":"7"},{"size":401,"mtime":1611034788198,"results":"8","hashOfConfig":"7"},{"size":653,"mtime":1611053506536,"results":"9","hashOfConfig":"7"},{"size":138,"mtime":1611053499073,"results":"10","hashOfConfig":"7"},{"size":692,"mtime":1611053416366,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1pfy2jl",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"E:\\workspace\\react-typescript\\src\\index.js",[],["25","26"],"E:\\workspace\\react-typescript\\src\\reportWebVitals.js",[],"E:\\workspace\\react-typescript\\src\\App.tsx",["27"],"E:\\workspace\\react-typescript\\src\\TodoItem.tsx",["28","29","30"],"E:\\workspace\\react-typescript\\src\\Label.tsx",["31","32","33","34","35"],"import { useState } from 'react';\r\n\r\nconst Label = ({ item, setItem, TodoList, setTodoList }: any) => {\r\n  const [text, setText] = useState('');\r\n  const [number, setNumber] = useState(0);\r\n  const onChange = (e: any): void => {\r\n    const { value } = e.currentTarget;\r\n    setText(value);\r\n  };\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    setItem({ id: number, text: text, state: false });\r\n    setNumber(() => number + 1);\r\n    setTodoList(TodoList.concat(item));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input onChange={onChange} value={text}></input>\r\n      <button type={'submit'}>추가</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n",["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":11,"column":1,"nodeType":"44","messageId":"45","endLine":11,"endColumn":15},{"ruleId":"42","severity":1,"message":"43","line":1,"column":18,"nodeType":"46","messageId":"45","endLine":1,"endColumn":37},{"ruleId":"42","severity":1,"message":"47","line":1,"column":19,"nodeType":"48","messageId":"49","endLine":1,"endColumn":33},{"ruleId":"50","severity":1,"message":"51","line":1,"column":30,"nodeType":"52","messageId":"53","endLine":1,"endColumn":33,"suggestions":"54"},{"ruleId":"42","severity":1,"message":"43","line":3,"column":15,"nodeType":"46","messageId":"45","endLine":3,"endColumn":65},{"ruleId":"42","severity":1,"message":"47","line":3,"column":16,"nodeType":"48","messageId":"49","endLine":3,"endColumn":61},{"ruleId":"50","severity":1,"message":"51","line":3,"column":58,"nodeType":"52","messageId":"53","endLine":3,"endColumn":61,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"51","line":6,"column":24,"nodeType":"52","messageId":"53","endLine":6,"endColumn":27,"suggestions":"56"},{"ruleId":"50","severity":1,"message":"51","line":11,"column":24,"nodeType":"52","messageId":"53","endLine":11,"endColumn":27,"suggestions":"57"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","ArrowFunctionExpression","Object pattern argument should be typed with a non-any type.","ObjectPattern","anyTypedArgUnnamed","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["60","61"],["62","63"],["64","65"],["66","67"],"no-global-assign","no-unsafe-negation",{"messageId":"68","fix":"69","desc":"70"},{"messageId":"71","fix":"72","desc":"73"},{"messageId":"68","fix":"74","desc":"70"},{"messageId":"71","fix":"75","desc":"73"},{"messageId":"68","fix":"76","desc":"70"},{"messageId":"71","fix":"77","desc":"73"},{"messageId":"68","fix":"78","desc":"70"},{"messageId":"71","fix":"79","desc":"73"},"suggestUnknown",{"range":"80","text":"81"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"80","text":"82"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"83","text":"81"},{"range":"83","text":"82"},{"range":"84","text":"81"},{"range":"84","text":"82"},{"range":"85","text":"81"},{"range":"85","text":"82"},[29,32],"unknown","never",[94,97],[213,216],[322,325]]